// AUTOGENERATED FILE: easyjson marshaler/unmarshalers.

package stash

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6ff8f229DecodeGithubComEverlagGothingStash(in *jlexer.Lexer, out *Stash) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountName":
			out.AccountName = string(in.String())
		case "lastCharacterName":
			out.LastCharacterName = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "stash":
			out.Stash = string(in.String())
		case "stashType":
			out.StashType = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]Item, 0, 1)
					} else {
						out.Items = []Item{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Item
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "public":
			out.Public = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff8f229EncodeGithubComEverlagGothingStash(out *jwriter.Writer, in Stash) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"accountName\":")
	out.String(string(in.AccountName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lastCharacterName\":")
	out.String(string(in.LastCharacterName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"stash\":")
	out.String(string(in.Stash))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"stashType\":")
	out.String(string(in.StashType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"items\":")
	if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Items {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"public\":")
	out.Bool(bool(in.Public))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stash) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff8f229EncodeGithubComEverlagGothingStash(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stash) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff8f229EncodeGithubComEverlagGothingStash(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stash) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff8f229DecodeGithubComEverlagGothingStash(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stash) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff8f229DecodeGithubComEverlagGothingStash(l, v)
}
func easyjson6ff8f229DecodeGithubComEverlagGothingStash1(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "next_change_id":
			out.NextChangeID = string(in.String())
		case "stashes":
			if in.IsNull() {
				in.Skip()
				out.Stashes = nil
			} else {
				in.Delim('[')
				if out.Stashes == nil {
					if !in.IsDelim(']') {
						out.Stashes = make([]Stash, 0, 1)
					} else {
						out.Stashes = []Stash{}
					}
				} else {
					out.Stashes = (out.Stashes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Stash
					(v4).UnmarshalEasyJSON(in)
					out.Stashes = append(out.Stashes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff8f229EncodeGithubComEverlagGothingStash1(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"next_change_id\":")
	out.String(string(in.NextChangeID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"stashes\":")
	if in.Stashes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in.Stashes {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff8f229EncodeGithubComEverlagGothingStash1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff8f229EncodeGithubComEverlagGothingStash1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff8f229DecodeGithubComEverlagGothingStash1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff8f229DecodeGithubComEverlagGothingStash1(l, v)
}
func easyjson6ff8f229DecodeGithubComEverlagGothingStash2(in *jlexer.Lexer, out *Property) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]PropertyValue, 0, 2)
					} else {
						out.Values = []PropertyValue{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v7 PropertyValue
					if data := in.Raw(); in.Ok() {
						in.AddError((v7).UnmarshalJSON(data))
					}
					out.Values = append(out.Values, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "displayMode":
			out.DisplayMode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff8f229EncodeGithubComEverlagGothingStash2(out *jwriter.Writer, in Property) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"values\":")
	if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in.Values {
			if v8 > 0 {
				out.RawByte(',')
			}
			out.Raw((v9).MarshalJSON())
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"displayMode\":")
	out.Int(int(in.DisplayMode))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Property) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff8f229EncodeGithubComEverlagGothingStash2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Property) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff8f229EncodeGithubComEverlagGothingStash2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Property) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff8f229DecodeGithubComEverlagGothingStash2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Property) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff8f229DecodeGithubComEverlagGothingStash2(l, v)
}
func easyjson6ff8f229DecodeGithubComEverlagGothingStash3(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "verified":
			out.Verified = bool(in.Bool())
		case "ilvl":
			out.Ilvl = int(in.Int())
		case "icon":
			out.Icon = string(in.String())
		case "league":
			out.League = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "typeLine":
			out.TypeLine = string(in.String())
		case "identified":
			out.Identified = bool(in.Bool())
		case "corrupted":
			out.Corrupted = bool(in.Bool())
		case "implicitMods":
			if in.IsNull() {
				in.Skip()
				out.ImplicitMods = nil
			} else {
				in.Delim('[')
				if out.ImplicitMods == nil {
					if !in.IsDelim(']') {
						out.ImplicitMods = make([]ItemMod, 0, 1)
					} else {
						out.ImplicitMods = []ItemMod{}
					}
				} else {
					out.ImplicitMods = (out.ImplicitMods)[:0]
				}
				for !in.IsDelim(']') {
					var v10 ItemMod
					if data := in.Raw(); in.Ok() {
						in.AddError((v10).UnmarshalJSON(data))
					}
					out.ImplicitMods = append(out.ImplicitMods, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "explicitMods":
			if in.IsNull() {
				in.Skip()
				out.ExplicitMods = nil
			} else {
				in.Delim('[')
				if out.ExplicitMods == nil {
					if !in.IsDelim(']') {
						out.ExplicitMods = make([]ItemMod, 0, 1)
					} else {
						out.ExplicitMods = []ItemMod{}
					}
				} else {
					out.ExplicitMods = (out.ExplicitMods)[:0]
				}
				for !in.IsDelim(']') {
					var v11 ItemMod
					if data := in.Raw(); in.Ok() {
						in.AddError((v11).UnmarshalJSON(data))
					}
					out.ExplicitMods = append(out.ExplicitMods, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "flavourText":
			if in.IsNull() {
				in.Skip()
				out.FlavourText = nil
			} else {
				in.Delim('[')
				if out.FlavourText == nil {
					if !in.IsDelim(']') {
						out.FlavourText = make([]string, 0, 4)
					} else {
						out.FlavourText = []string{}
					}
				} else {
					out.FlavourText = (out.FlavourText)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.FlavourText = append(out.FlavourText, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "note":
			out.Note = string(in.String())
		case "properties":
			if in.IsNull() {
				in.Skip()
				out.Properties = nil
			} else {
				in.Delim('[')
				if out.Properties == nil {
					if !in.IsDelim(']') {
						out.Properties = make([]Property, 0, 1)
					} else {
						out.Properties = []Property{}
					}
				} else {
					out.Properties = (out.Properties)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Property
					(v13).UnmarshalEasyJSON(in)
					out.Properties = append(out.Properties, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "utilityMods":
			if in.IsNull() {
				in.Skip()
				out.UtilityMods = nil
			} else {
				in.Delim('[')
				if out.UtilityMods == nil {
					if !in.IsDelim(']') {
						out.UtilityMods = make([]string, 0, 4)
					} else {
						out.UtilityMods = []string{}
					}
				} else {
					out.UtilityMods = (out.UtilityMods)[:0]
				}
				for !in.IsDelim(']') {
					var v14 string
					v14 = string(in.String())
					out.UtilityMods = append(out.UtilityMods, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "descrText":
			out.DescrText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff8f229EncodeGithubComEverlagGothingStash3(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"verified\":")
	out.Bool(bool(in.Verified))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ilvl\":")
	out.Int(int(in.Ilvl))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"icon\":")
	out.String(string(in.Icon))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"league\":")
	out.String(string(in.League))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"typeLine\":")
	out.String(string(in.TypeLine))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"identified\":")
	out.Bool(bool(in.Identified))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"corrupted\":")
	out.Bool(bool(in.Corrupted))
	if len(in.ImplicitMods) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"implicitMods\":")
		if in.ImplicitMods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.ImplicitMods {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Raw((v16).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.ExplicitMods) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"explicitMods\":")
		if in.ExplicitMods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.ExplicitMods {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Raw((v18).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.FlavourText) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"flavourText\":")
		if in.FlavourText == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.FlavourText {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	if in.Note != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"note\":")
		out.String(string(in.Note))
	}
	if len(in.Properties) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"properties\":")
		if in.Properties == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Properties {
				if v21 > 0 {
					out.RawByte(',')
				}
				(v22).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.UtilityMods) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"utilityMods\":")
		if in.UtilityMods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.UtilityMods {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if in.DescrText != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"descrText\":")
		out.String(string(in.DescrText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff8f229EncodeGithubComEverlagGothingStash3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff8f229EncodeGithubComEverlagGothingStash3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff8f229DecodeGithubComEverlagGothingStash3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff8f229DecodeGithubComEverlagGothingStash3(l, v)
}
